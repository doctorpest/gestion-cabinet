# version: "3.8"

# services:
#   backend:
#     build: ./backend
#     ports:
#       - "3000:3000"
#     env_file:
#       - .env
#     volumes:
#       - ./backend/uploads:/app/uploads
#     networks:
#       - appnet

#   frontend:
#     build: ./frontend/gestion-cabinet-front
#     ports:
#       - "80:80"
#     depends_on:
#       - backend
#     networks:
#       - appnet

# networks:
#   appnet:
#     driver: bridge

version: "3.9"

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: doctorpest
      POSTGRES_PASSWORD: mdpcabinet
      POSTGRES_DB: gestion_cabinet
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db-init/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db-init/restore-if-empty.sh:/docker-entrypoint-initdb.d/restore-if-empty.sh
      - ./backups:/backups
    networks:
      - appnet

  db-backup:
    image: postgres:15
    volumes:
      - ./cron/backup.sh:/backup.sh
      - ./backups:/backups
    environment:
      POSTGRES_DB: gestion_cabinet
      POSTGRES_USER: doctorpest
      POSTGRES_PASSWORD: mdpcabinet
    entrypoint: >
      sh -c "apt update && apt install -y cron &&
             echo '*/30 * * * * /backup.sh >> /var/log/cron.log 2>&1' | crontab - &&
             cron -f"
    depends_on:
      - postgres
    networks:
      - appnet

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      - postgres
    networks:
      - appnet

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quasar-frontend
    ports:
      - "8080:80" # nginx sert sur le port 80 interne, on le mappe sur 8080 local
    depends_on:
      - backend
    networks:
      - appnet
    restart: unless-stopped

networks:
  appnet:
    driver: bridge
volumes:
  pgdata:



